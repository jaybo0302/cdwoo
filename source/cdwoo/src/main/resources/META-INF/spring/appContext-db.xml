<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:security="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-4.1.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-4.1.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-4.1.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
        http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-4.1.xsd">

  <!-- 扫描spring注解组件 -->
  <context:component-scan base-package="com.cd"></context:component-scan>
  
  <!-- 引入jdbc,mail配置文件 -->
  <bean class="org.springframework.beans.factory.config.PropertyPlaceholderConfigurer">
    <property name="locations">
      <list>
        <value>classpath:com/cd/**/conf/db/jdbc.properties</value>
      </list>
    </property>
    <property name="ignoreUnresolvablePlaceholders" value="true" />
  </bean>

  <!-- (事务管理)transaction manager, use JtaTransactionManager for global tx -->
  <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
    <property name="dataSource" ref="cdwooDataSource" />
  </bean>

  <!-- 事务管理传播配置:add、modify、delete开头默认开启事务 -->
  <tx:advice id="txAdvice" transaction-manager="transactionManager">
    <tx:attributes>
      <tx:method name="add*" propagation="REQUIRED" />
      <tx:method name="modify*" propagation="REQUIRED" />
      <tx:method name="delete*" propagation="REQUIRED" />
      <tx:method name="query*" read-only="true" />
      <tx:method name="insert*" read-only="true"/>
    </tx:attributes>
  </tx:advice>

  <!--创建jdbc数据源 -->
  <bean id="cdwooDataSource" destroy-method="close" class="com.mchange.v2.c3p0.ComboPooledDataSource">
    <property name="driverClass" value="${jdbc.driver}" />
    <property name="jdbcUrl" value="${jdbc.url}" />
    <property name="user" value="${jdbc.username}" />
    <property name="password" value="${jdbc.password}" />
    <!-- 最小连接数 -->
    <property name="minPoolSize" value="${minPoolSize}" />
    <!-- 最大连接数 -->
    <property name="maxPoolSize" value="${maxPoolSize}" />
    <!-- 初始化连接数 -->
    <property name="initialPoolSize" value="${initialPoolSize}" />
    <!-- -最大空闲时间,单位：秒，超过最大空闲时间未使用则连接被丢弃,若为0则永不丢弃。Default: 0 -->
    <property name="maxIdleTime" value="${maxIdleTime}" />
    <!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
    <property name="acquireIncrement" value="${acquireIncrement}" />
    <!--JDBC的标准参数，用以控制数据源内加载的PreparedStatements数量。但由于预缓存的statements 属于单个connection而不是整个连接池。所以设置这个参数需要考虑到多方面的因素。 如果maxStatements与maxStatementsPerConnection均为0，则缓存被关闭。Default: 
      0 -->
    <property name="maxStatements" value="${maxStatements}" />
    <!--每隔指定时间（单位：秒）检查所有连接池中的空闲连接。Default: 0 -->
    <property name="idleConnectionTestPeriod" value="${idleConnectionTestPeriod}" />

    <!--定义在从数据库获取新连接失败后重复尝试的次数。Default: 30 -->
    <property name="acquireRetryAttempts" value="${acquireRetryAttempts}" />
    <!--获取连接失败将会引起所有等待连接池来获取连接的线程抛出异常。但是数据源仍有效保留，并在下次调用getConnection()的时候继续尝试获取连接。如果设为true，那么在尝试获取连接失败后该数据源将申明已断开并永久关闭。Default: 
      false -->
    <property name="breakAfterAcquireFailure" value="${breakAfterAcquireFailure}" />
    <!--因性能消耗大请只在需要的时候使用它。如果设为true那么在每个connection提交的 时候都将校验其有效性。建议使用idleConnectionTestPeriod或automaticTestTable 等方法来提升连接测试的性能。Default: 
      false -->
    <property name="testConnectionOnCheckout" value="${testConnectionOnCheckout}" />
  </bean>
  
<!--#################################多数据源切换begin######################################-->

    <!--创建jdbc数据源 -->
    <bean id="masterDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.w}" />
        <property name="url" value="${jdbc.url.w}" />
        <property name="username" value="${jdbc.username.w}" />
        <property name="password" value="${jdbc.password.w}" />
        <!-- 初始化连接数 -->
        <property name="initialSize" value="10"></property>
        <!-- 最大活动连接数 -->
        <property name="maxActive" value="100"></property>
        <!-- 最大空闲连接 -->
        <property name="maxIdle" value="40"></property>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="10"></property>
        <!-- 从池中获取连接最大等待时间 -->
        <property name="maxWait" value="3000"></property>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
        <property name="testWhileIdle" value="true"></property>
        <!-- 借出连接时不要测试 -->
        <property name="testOnBorrow" value="false"></property>
        <!-- 每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"></property>
        <!-- 池中的连接空闲1分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"></property>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"></property>
        <!-- 连接泄漏回收参数，当可用连接数少于3个时才执行 -->
        <property name="removeAbandoned" value="true"></property>
        <!-- 连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
        <property name="removeAbandonedTimeout" value="180"></property>
    </bean>
    <bean id="slaveDataSource1" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.r}" />
        <property name="url" value="${jdbc.url.r}" />
        <property name="username" value="${jdbc.username.r}" />
        <property name="password" value="${jdbc.password.r}" />
        <!-- 初始化连接数 -->
        <property name="initialSize" value="10"></property>
        <!-- 最大活动连接数 -->
        <property name="maxActive" value="100"></property>
        <!-- 最大空闲连接 -->
        <property name="maxIdle" value="40"></property>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="10"></property>
        <!-- 从池中获取连接最大等待时间 -->
        <property name="maxWait" value="3000"></property>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
        <property name="testWhileIdle" value="true"></property>
        <!-- 借出连接时不要测试 -->
        <property name="testOnBorrow" value="false"></property>
        <!-- 每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"></property>
        <!-- 池中的连接空闲1分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="1800000"></property>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"></property>
        <!-- 连接泄漏回收参数，当可用连接数少于3个时才执行 -->
        <property name="removeAbandoned" value="true"></property>
        <!-- 连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
        <property name="removeAbandonedTimeout" value="180"></property>
    </bean>
    <bean id="newsDuJiaDataSource" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.dujia}" />
        <property name="url" value="${jdbc.url.dujia}" />
        <property name="username" value="${jdbc.username.dujia}" />
        <property name="password" value="${jdbc.password.dujia}" />
        <!-- 初始化连接数 -->
        <property name="initialSize" value="10"></property>
        <!-- 最大活动连接数 -->
        <property name="maxActive" value="100"></property>
        <!-- 最大空闲连接 -->
        <property name="maxIdle" value="40"></property>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="10"></property>
        <!-- 从池中获取连接最大等待时间 -->
        <property name="maxWait" value="3000"></property>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
        <property name="testWhileIdle" value="true"></property>
        <!-- 借出连接时不要测试 -->
        <property name="testOnBorrow" value="false"></property>
        <!-- 每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"></property>
        <!-- 池中的连接空闲1分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="60000"></property>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"></property>
        <!-- 连接泄漏回收参数，当可用连接数少于3个时才执行 -->
        <property name="removeAbandoned" value="true"></property>
        <!-- 连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
        <property name="removeAbandonedTimeout" value="180"></property>
    </bean>
    <bean id="oldSqlServerDS" class="org.apache.commons.dbcp.BasicDataSource" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver.oldSqlServer}" />
        <property name="url" value="${jdbc.url.oldSqlServer}" />
        <property name="username" value="${jdbc.username.oldSqlServer}" />
        <property name="password" value="${jdbc.password.oldSqlServer}" />
        <!-- 初始化连接数 -->
        <property name="initialSize" value="10"></property>
        <!-- 最大活动连接数 -->
        <property name="maxActive" value="100"></property>
        <!-- 最大空闲连接 -->
        <property name="maxIdle" value="40"></property>
        <!-- 最小空闲连接 -->
        <property name="minIdle" value="10"></property>
        <!-- 从池中获取连接最大等待时间 -->
        <property name="maxWait" value="3000"></property>
        <!-- 指明连接是否被空闲连接回收器(如果有)进行检验.如果检测失败,则连接将被从池中去除. -->
        <property name="testWhileIdle" value="true"></property>
        <!-- 借出连接时不要测试 -->
        <property name="testOnBorrow" value="false"></property>
        <!-- 每30秒运行一次空闲连接回收器 -->
        <property name="timeBetweenEvictionRunsMillis" value="30000"></property>
        <!-- 池中的连接空闲1分钟后被回收 -->
        <property name="minEvictableIdleTimeMillis" value="60000"></property>
        <!-- 在每次空闲连接回收器线程(如果有)运行时检查的连接数量 -->
        <property name="numTestsPerEvictionRun" value="3"></property>
        <!-- 连接泄漏回收参数，当可用连接数少于3个时才执行 -->
        <property name="removeAbandoned" value="true"></property>
        <!-- 连接泄漏回收参数，180秒，泄露的连接可以被删除的超时值 -->
        <property name="removeAbandonedTimeout" value="180"></property>
    </bean>
   <bean id="sqlSessionFactoryMaster" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="slaveDataSource1" />
    <property name="mapperLocations" value="classpath:com/cd/**/mybatis/*Mapper.xml" />
    <!-- 定义mybatis插件 -->
    <property name="plugins">
      <array>
        <bean class="com.cd.cdwoo.plugs.mybatis.CustomPlugin">
          <!-- 是否显示sql -->
          <property name="isShowSql" value="${isShowSql}"></property>
        </bean>
      </array>
    </property>
  </bean>
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
    p:basePackage="com.cd.cdwoo.*.dao.master"  p:sqlSessionFactoryBeanName="sqlSessionFactoryMaster" />
  <bean id="sqlSessionFactoryCluster" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="oldSqlServerDS" />
    <property name="mapperLocations" value="classpath:com/cd/**/mybatis/*Mapper.xml" />
    <!-- 定义mybatis插件 -->
    <property name="plugins">
      <array>
        <bean class="com.cd.cdwoo.plugs.mybatis.CustomPlugin">
          <!-- 是否显示sql -->
          <property name="isShowSql" value="${isShowSql}"></property>
        </bean>
      </array>
    </property>
  </bean>
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
    p:basePackage="com.cd.cdwoo.*.dao.cluster"  p:sqlSessionFactoryBeanName="sqlSessionFactoryCluster" />
  <!--#################################多数据源切换end######################################-->
  
  <!-- 创建SqlSessionFactory，同时指定数据源 -->
  <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="cdwooDataSource" />
    <property name="mapperLocations" value="classpath:com/cd/**/mybatis/*Mapper.xml" />
    <!-- 定义mybatis插件 -->
    <property name="plugins">
      <array>
        <bean class="com.cd.cdwoo.plugs.mybatis.CustomPlugin">
          <!-- 是否显示sql -->
          <property name="isShowSql" value="${isShowSql}"></property>
        </bean>
      </array>
    </property>
  </bean>

<!--   <bean id="sqlSession" class="org.mybatis.spring.SqlSessionTemplate">
    <constructor-arg index="0" ref="sqlSessionFactory" />
  </bean> -->

  <!-- 创建SqlSessionFactory，同时指定数据源 -->
<!--   <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean"
    p:dataSource-ref="dynamicDataSource" p:configLocation="classpath:META-INF/mybatis/MyBatisConf.xml"
    p:mapperLocations="classpath:mybatis/*.xml" /> -->

  <!-- Mapper接口所在包名，Spring会自动查找其下的Mapper -->
  <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer"
    p:basePackage="com.cd.cdwoo.*.dao"  p:sqlSessionFactoryBeanName="sqlSessionFactory" />
    
  <!-- 系统日志、事务切面定义 -->
  <aop:config>
    <aop:pointcut id="dbPointCut" expression="execution(* com.cd..service.*.*(..))" />
    <aop:advisor advice-ref="txAdvice" pointcut-ref="dbPointCut" order="2" />
    <aop:aspect ref="serviceAop" order="1">
      <aop:after-returning method="afterReturn" pointcut="execution(* com.cd..*.add*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.cd..*.add*(..))"
        throwing="ex" />
      <aop:after-returning method="afterReturn" pointcut="execution(* com.cd..*.modify*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.cd..*.modify*(..))"
        throwing="ex" />
      <aop:after-returning method="afterReturn" pointcut="execution(* com.cd..*.delete*(..))"
        returning="serviceResult" />
      <aop:after-throwing method="atferException" pointcut="execution(* com.cd..*.delete*(..))"
        throwing="ex" />
    </aop:aspect>
  </aop:config>
  <!-- 系统日志切面对应的类 -->
  <bean id="serviceAop" class="com.cd.cdwoo.web.aop.ServiceAop" />
</beans>