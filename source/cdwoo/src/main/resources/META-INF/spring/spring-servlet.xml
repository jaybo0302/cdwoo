<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context" xmlns:tx="http://www.springframework.org/schema/tx"
  xmlns:security="http://www.springframework.org/schema/security" xmlns:p="http://www.springframework.org/schema/p"
  xmlns:mvc="http://www.springframework.org/schema/mvc" xmlns:util="http://www.springframework.org/schema/util"
  xmlns:aop="http://www.springframework.org/schema/aop"
  xsi:schemaLocation="http://www.springframework.org/schema/mvc http://www.springframework.org/schema/mvc/spring-mvc-3.2.xsd
		http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
		http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util-3.2.xsd
		http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
		http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.2.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.2.xsd ">
      
  <!-- spring 注解默认配置  -->
  <context:annotation-config />
  <!-- mvc注解驱动 -->
  <mvc:annotation-driven />
  <!-- 扫描包 -->
  <context:component-scan base-package="com.cd"></context:component-scan>
  <!-- <import resource="classpath:META-INF/spring/appContext-db.xml"></import> -->
  
  <!-- 通用视图解析类 -->
  <bean class="org.springframework.web.servlet.view.InternalResourceViewResolver">
    <property name="prefix" value="/" />
    <property name="suffix" value=".jsp" />
    <property name="viewClass" value="org.springframework.web.servlet.view.JstlView" />
  </bean>
  
  <!-- 针对下面这句话的注释
   启动项目时，容器根据web.xml进行bean的扫描。
   listener的顺序高于contextConfig，高于servlet，所以默认先加载spring，再spring mvc。而aop是要配置在mvc上，所以此处需要
   动态代理（有一种特殊情况是如果spring mvc中扫描包，上面的代码中排除对service的扫描，这句话不用加，怀疑是再次扫描的时候aop失效）
   -->
  <aop:aspectj-autoproxy expose-proxy="true"></aop:aspectj-autoproxy>
</beans>